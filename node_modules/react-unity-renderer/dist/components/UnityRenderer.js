"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnityRenderer = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var useScript_1 = require("../hooks/useScript");
/**
 * A components that renders a Unity WebGL build from a given configuration
 * context. Allows bidirectional communication and loading progress tracking.
 *
 * @param {UnityRendererProps} props Configurtion context, Unity-specific
 * callback handlers and default React props for a `HTMLCanvasElement`.
 * Note that `ref` is not available due to internal use.
 * @returns {JSX.Element | null} A `JSX.Element` containing the renderer,
 * or `null` if not initialized yet.
 */
var UnityRenderer = function (_a) {
    var context = _a.context, onUnityProgressChange = _a.onUnityProgressChange, onUnityReadyStateChange = _a.onUnityReadyStateChange, onUnityError = _a.onUnityError, canvasProps = __rest(_a, ["context", "onUnityProgressChange", "onUnityReadyStateChange", "onUnityError"]);
    var _b = react_1.useState(context), ctx = _b[0], setCtx = _b[1];
    var _c = useScript_1.useScript(ctx === null || ctx === void 0 ? void 0 : ctx.getConfig().loaderUrl), loaderState = _c[0], setLoaderSource = _c[1];
    // Reference to the actual <canvas> element, which has to be passed to
    // the native `createUnityInstance()` method.
    var canvas = react_1.useRef(null);
    // This is the last state the game was in, either ready or not ready.
    // It is used to trigger `onUnityReadyStateChange` reliably.
    var _d = react_1.useState(false), lastReadyState = _d[0], setLastReadyState = _d[1];
    /**
     * The callback which will be called from the `unityInstance` while
     * the game is loading.
     * @param {number} progress The progress ranging from `0.0` to `1.0`
     */
    function onUnityProgress(progress) {
        if (onUnityProgressChange)
            onUnityProgressChange(progress);
        // if loading has completed, change ready state
        if (lastReadyState === false && progress >= 1.0) {
            if (onUnityReadyStateChange)
                onUnityReadyStateChange(true);
            setLastReadyState(true);
        }
        else if (lastReadyState === true) {
            // if ready state changed back to false, trigger again
            if (onUnityReadyStateChange)
                onUnityReadyStateChange(false);
            setLastReadyState(false);
        }
    }
    /**
     * Reset all local state of the Component. Usually done when the game was shut down.
     */
    function resetState() {
        // reset progress / ready state
        if (onUnityProgressChange)
            onUnityProgressChange(0);
        if (onUnityReadyStateChange)
            onUnityReadyStateChange(false);
        // reset all local states
        setCtx(undefined);
        setLoaderSource(undefined);
        setLastReadyState(false);
    }
    /**
     * Unmounts the game by shutting its instance down, removing the loader
     * script from the DOM and sending the appropriate events via the props.
     *
     * @param {() => void} onComplete Callback function which will be executed
     * after the unmounting has completed.
     */
    function unmount(onComplete) {
        if (ctx) {
            ctx.shutdown(function () {
                resetState();
                // delayed callback
                if (onComplete)
                    onComplete();
            });
            return;
        }
        resetState();
        if (onComplete)
            onComplete();
    }
    /**
     * Uses the native Unity loader method to attach the Unity instance to
     * the renderer `canvas`.
     *
     * @returns {Promise<void>} A Promise resolving on successful mount of the
     * Unity instance.
     */
    function mount() {
        return __awaiter(this, void 0, void 0, function () {
            var c, instance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // if no context or loader is available, or the game is already loaded
                        if (!ctx || !canvas.current || loaderState !== 'active' || lastReadyState) {
                            throw new Error('cannot mount unity instance without a context or loader');
                        }
                        c = ctx.getConfig();
                        return [4 /*yield*/, window.createUnityInstance(canvas.current, {
                                dataUrl: c.dataUrl,
                                frameworkUrl: c.frameworkUrl,
                                codeUrl: c.codeUrl,
                                streamingAssetsUrl: c.streamingAssetsUrl,
                                companyName: c.companyName,
                                productName: c.productName,
                                productVersion: c.productVersion,
                            }, function (p) { return onUnityProgress(p); })];
                    case 1:
                        instance = _a.sent();
                        // set the instance for further JavaScript <--> Unity communication
                        ctx.setInstance(instance);
                        return [2 /*return*/];
                }
            });
        });
    }
    // on context prop change (step 1)
    react_1.useEffect(function () {
        // unmount currently running instance, set new context after that finished
        unmount(function () { return setCtx(context); });
    }, [context]);
    // on context state change (step 2)
    react_1.useEffect(function () {
        if (!ctx)
            return;
        setLoaderSource(ctx.getConfig().loaderUrl);
    }, [ctx]);
    // on loader state change (step 3)
    react_1.useEffect(function () {
        switch (loaderState) {
            // loader script is now active, start the unity instance
            case 'active':
                mount().catch(function (e) {
                    unmount();
                    if (onUnityError)
                        onUnityError(e);
                });
                break;
            // failed to activate loader script
            case 'error':
                unmount();
                if (onUnityError)
                    onUnityError(new Error("failed to mount unity loader from: " + (ctx === null || ctx === void 0 ? void 0 : ctx.getConfig().loaderUrl)));
                break;
            default:
                // unloaded or still loading
                break;
        }
    }, [loaderState]);
    // on unmount
    react_1.useEffect(function () { return function () { return unmount(); }; }, []);
    // eslint-disable-next-line react/jsx-props-no-spreading
    return jsx_runtime_1.jsx("canvas", __assign({}, canvasProps, { ref: canvas }), void 0);
};
exports.UnityRenderer = UnityRenderer;
//# sourceMappingURL=UnityRenderer.js.map