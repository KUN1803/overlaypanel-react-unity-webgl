export interface UnityInstanceConfig {
    codeUrl: string;
    frameworkUrl: string;
    dataUrl: string;
    memoryUrl?: string;
    symbolsUrl?: string;
    streamingAssetsUrl?: string;
    companyName?: string;
    productName?: string;
    productVersion?: string;
}
export interface UnityLoaderConfig extends UnityInstanceConfig {
    loaderUrl: string;
}
/**
 * An interface containing event names and their handler parameter signatures.
 * This interface is supposed to be augmented via module augmentation by the
 * user.
 */
export interface EventSignatures {
}
/**
 * Defines a weak union type, which can fallback to another type.
 */
declare type WeakUnion<T, F> = T | (F & {});
/**
 * Defines a Unity WebGL context.
 *
 * The context is responsible for the initial startup parameters of the
 * `UnityRenderer`, as well as receiving events and emitting RPCs to Unity.
 *
 */
export declare class UnityContext {
    private config;
    private instance?;
    private handlers;
    /**
     * Creates a new `UnityContext` and registers the global event callback.
     *
     * @param {UnityLoaderConfig} config A loader configuration object.
     */
    constructor(config: UnityLoaderConfig);
    /**
     * Retrieves the currently activte loader configuration.
     *
     * @returns {UnityLoaderConfig} The current loader configuration object.
     */
    getConfig(): UnityLoaderConfig;
    /**
     * Sets the Unity instance this `UnityContext` is responsible for.
     *
     * @param {UnityInstance} instance The running Unity instance
     */
    setInstance(instance: UnityInstance): void;
    /**
     * Shuts down the running Unity instance, then unregisters the existing
     * event handlers.
     *
     * @param {() => void} onShutdownFinished Callback to execute when the
     * shutdown has been completed.
     *
     * @returns {void} void
     */
    shutdown(onShutdownFinished?: () => void): void;
    /**
     * Sends a message to the running Unity instance.
     *
     * @param {string} objectName The `GameObject` on which to call the method.
     * @param {string} methodName The name of the method which should be invoked.
     * @param {(string | number)} value The value to pass to the method
     * as the first parameter.
     * @returns {void} void
     */
    emit(objectName: string, methodName: string, value?: string | number): void;
    /**
     * Delegates an event handler to handle an event (from Unity) by using a
     * callback function.
     *
     * @param {string} name The (unique) name of the event.
     * @param {UnityEventCallback} callback The callback which should be invoked
     * upon the occurence of this event.
     */
    on<T extends WeakUnion<keyof EventSignatures, string>>(name: WeakUnion<keyof EventSignatures, T>, callback: (...params: T extends keyof EventSignatures ? EventSignatures[T] : any) => void): void;
    /**
     * Removes a instance-local event handler from the global event registry.
     *
     * @param {string} name Name of the local event handler.
     */
    off(name: WeakUnion<keyof EventSignatures, string>): void;
    /**
     * Enables or disables fullscreen mode.
     *
     * @param {booolean} enabled Whether to enable or disable fullscreen.
     * @returns {void} void
     */
    setFullscreen(enabled: boolean): void;
    /**
     * Creates a global event registry which holds a list of callbacks for
     * each registered event name.
     * This enables fairly fail-safe multi-tenancy event handling.
     *
     * @returns {void} void
     */
    private mountGlobalEventRegistry;
    /**
     * Creates the global lookup handler which looks up the list of event
     * handlers for a given event name and executes them with the arguments
     * of the callback.
     *
     * If no event handler is registered for an event that is received, a
     * warning will be logged to the console.
     *
     * @returns {void} void
     */
    private mountGlobalLookupHandler;
}
export {};
//# sourceMappingURL=context.d.ts.map