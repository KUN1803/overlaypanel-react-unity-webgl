{"ast":null,"code":"var _jsxFileName = \"/Users/knottrodt/Projects/REACT-Demo/react-demo/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './App.css';\nimport { useState } from 'react';\nimport { UnityContext, UnityRenderer } from 'react-unity-renderer';\nimport Draggable from \"react-draggable\"; // get those URLs from your Unity WebGL build.\n// you *could* put a JSON in your WebGL template containing this information\n// and load that with fetch or axios to assemble your config.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst config = {\n  loaderUrl: '/unitywebgl/Build/WebDemo.loader.js',\n  frameworkUrl: '/unitywebgl/Build/WebDemo.framework.js',\n  codeUrl: '/unitywebgl/Build/WebDemo.wasm',\n  dataUrl: '/unitywebgl/Build/WebDemo.data'\n};\n\nfunction App() {\n  _s();\n\n  const [ctx] = useState(new UnityContext(config)); // Keep track of the game progress and ready state like this:\n\n  const [progress, setProgress] = useState(0);\n  const [ready, setReady] = useState(false);\n\n  function handleBtn() {\n    if (ready) ctx.emit('Cube', 'StartStopRotation');\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(UnityRenderer, {\n      context: ctx // optional state information callbacks\n      ,\n      onUnityProgressChange: p => setProgress(p),\n      onUnityReadyStateChange: s => setReady(s),\n      onUnityError: e => console.error(e) // <UnityRenderer> has every prop (except ref) from HTMLCanvasElement.\n      // This means you can use something like style!\n      // Also it works perfectly with styled-components.\n      ,\n      style: {\n        width: '100%',\n        height: '100%'\n      } // optional, but a good idea.\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Draggable, {\n      axis: \"x\",\n      handle: \".handle\",\n      defaultPosition: {\n        x: 0,\n        y: 0\n      },\n      grid: [25, 25],\n      scale: 1,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"handle\",\n          children: \"Drag from here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"This readme is really dragging on...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleBtn(),\n          children: \"RotationHandler\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"s0NmB2opb+dtRYqNZM8DYzCIt08=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/knottrodt/Projects/REACT-Demo/react-demo/src/App.tsx"],"names":["React","useState","UnityContext","UnityRenderer","Draggable","config","loaderUrl","frameworkUrl","codeUrl","dataUrl","App","ctx","progress","setProgress","ready","setReady","handleBtn","emit","p","s","e","console","error","width","height","x","y"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,WAAP;AACA,SAAcC,QAAd,QAAwC,OAAxC;AACA,SACEC,YADF,EAEEC,aAFF,QAIO,sBAJP;AAKA,OAAOC,SAAP,MAAsB,iBAAtB,C,CAEA;AACA;AACA;;;;AACA,MAAMC,MAAyB,GAAG;AAChCC,EAAAA,SAAS,EAAE,qCADqB;AAEhCC,EAAAA,YAAY,EAAE,wCAFkB;AAGhCC,EAAAA,OAAO,EAAE,gCAHuB;AAIhCC,EAAAA,OAAO,EAAE;AAJuB,CAAlC;;AAQA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,GAAD,IAAQV,QAAQ,CAAe,IAAIC,YAAJ,CAAiBG,MAAjB,CAAf,CAAtB,CADa,CAEb;;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAS,CAAT,CAAxC;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAU,KAAV,CAAlC;;AAEA,WAASe,SAAT,GAAoB;AACnB,QAAGF,KAAH,EAAUH,GAAG,CAACM,IAAJ,CAAS,MAAT,EAAiB,mBAAjB;AACV;;AAED,sBACE;AAAA,4BACA,QAAC,aAAD;AACE,MAAA,OAAO,EAAEN,GADX,CAEE;AAFF;AAGE,MAAA,qBAAqB,EAAGO,CAAD,IAAOL,WAAW,CAACK,CAAD,CAH3C;AAIE,MAAA,uBAAuB,EAAGC,CAAD,IAAOJ,QAAQ,CAACI,CAAD,CAJ1C;AAKE,MAAA,YAAY,EAAGC,CAAD,IAAOC,OAAO,CAACC,KAAR,CAAcF,CAAd,CALvB,CAME;AACA;AACA;AARF;AASE,MAAA,KAAK,EAAE;AAAEG,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,MAAM,EAAE;AAAzB,OATT,CAS4C;;AAT5C;AAAA;AAAA;AAAA;AAAA,YADA,eAYE,QAAC,SAAD;AACE,MAAA,IAAI,EAAC,GADP;AAEE,MAAA,MAAM,EAAC,SAFT;AAGE,MAAA,eAAe,EAAE;AAACC,QAAAA,CAAC,EAAE,CAAJ;AAAOC,QAAAA,CAAC,EAAE;AAAV,OAHnB;AAIE,MAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,CAJR;AAKE,MAAA,KAAK,EAAE,CALT;AAAA,6BAME;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAQ,UAAA,OAAO,EAAE,MAAIV,SAAS,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA,kBADF;AA2BD;;GArCQN,G;;KAAAA,G;AAyCT,eAAeA,GAAf","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { VFC, useState, useEffect} from 'react';\nimport {\n  UnityContext,\n  UnityRenderer,\n  UnityLoaderConfig,\n} from 'react-unity-renderer';\nimport Draggable from \"react-draggable\";\n\n// get those URLs from your Unity WebGL build.\n// you *could* put a JSON in your WebGL template containing this information\n// and load that with fetch or axios to assemble your config.\nconst config: UnityLoaderConfig = {\n  loaderUrl: '/unitywebgl/Build/WebDemo.loader.js',\n  frameworkUrl: '/unitywebgl/Build/WebDemo.framework.js',\n  codeUrl: '/unitywebgl/Build/WebDemo.wasm',\n  dataUrl: '/unitywebgl/Build/WebDemo.data',\n};\n\n\nfunction App() {\n  const [ctx] = useState<UnityContext>(new UnityContext(config));\n  // Keep track of the game progress and ready state like this:\n  const [progress, setProgress] = useState<number>(0);\n  const [ready, setReady] = useState<boolean>(false);\n\n  function handleBtn(){\n   if(ready) ctx.emit('Cube', 'StartStopRotation');\n  }\n\n  return (\n    <>\n    <UnityRenderer\n      context={ctx}\n      // optional state information callbacks\n      onUnityProgressChange={(p) => setProgress(p)}\n      onUnityReadyStateChange={(s) => setReady(s)}\n      onUnityError={(e) => console.error(e)}\n      // <UnityRenderer> has every prop (except ref) from HTMLCanvasElement.\n      // This means you can use something like style!\n      // Also it works perfectly with styled-components.\n      style={{ width: '100%', height: '100%' }} // optional, but a good idea.\n    />\n      <Draggable\n        axis=\"x\"\n        handle=\".handle\"\n        defaultPosition={{x: 0, y: 0}}\n        grid={[25, 25]}\n        scale={1}>\n        <div>\n          <div className=\"handle\">Drag from here</div>\n          <div>This readme is really dragging on...</div>\n          <button onClick={()=>handleBtn()}>RotationHandler</button>\n        </div>\n      </Draggable>\n    </>\n  );\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}