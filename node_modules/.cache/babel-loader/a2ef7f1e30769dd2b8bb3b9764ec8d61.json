{"ast":null,"code":"var _jsxFileName = \"/Users/knottrodt/Projects/REACT-Demo/react-demo/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './App.css';\nimport { useState } from 'react';\nimport { UnityContext, UnityRenderer } from 'react-unity-renderer';\nimport { Rnd } from 'react-rnd'; // get those URLs from your Unity WebGL build.\n// you *could* put a JSON in your WebGL template containing this information\n// and load that with fetch or axios to assemble your config.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst config = {\n  loaderUrl: '/unitywebgl/Build/WebDemo.loader.js',\n  frameworkUrl: '/unitywebgl/Build/WebDemo.framework.js',\n  codeUrl: '/unitywebgl/Build/WebDemo.wasm',\n  dataUrl: '/unitywebgl/Build/WebDemo.data'\n};\n\nfunction App() {\n  _s();\n\n  const [ctx] = useState(new UnityContext(config)); // Keep track of the game progress and ready state like this:\n\n  const [progress, setProgress] = useState(0);\n  const [ready, setReady] = useState(false);\n\n  function handleBtn() {\n    if (ready) ctx.emit('Cube', 'StartStopRotation');\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(UnityRenderer, {\n      context: ctx // optional state information callbacks\n      ,\n      onUnityProgressChange: p => setProgress(p),\n      onUnityReadyStateChange: s => setReady(s),\n      onUnityError: e => console.error(e) // <UnityRenderer> has every prop (except ref) from HTMLCanvasElement.\n      // This means you can use something like style!\n      // Also it works perfectly with styled-components.\n      ,\n      style: {\n        width: '100%',\n        height: '100%'\n      } // optional, but a good idea.\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Rnd, {\n      default: {\n        x: 20,\n        y: 200,\n        width: 320,\n        height: 200\n      },\n      children: \"Rnd\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"s0NmB2opb+dtRYqNZM8DYzCIt08=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/knottrodt/Projects/REACT-Demo/react-demo/src/App.tsx"],"names":["React","useState","UnityContext","UnityRenderer","Rnd","config","loaderUrl","frameworkUrl","codeUrl","dataUrl","App","ctx","progress","setProgress","ready","setReady","handleBtn","emit","p","s","e","console","error","width","height","x","y"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,WAAP;AACA,SAAcC,QAAd,QAAwC,OAAxC;AACA,SACEC,YADF,EAEEC,aAFF,QAIO,sBAJP;AAMA,SAASC,GAAT,QAAoB,WAApB,C,CAEA;AACA;AACA;;;;AACA,MAAMC,MAAyB,GAAG;AAChCC,EAAAA,SAAS,EAAE,qCADqB;AAEhCC,EAAAA,YAAY,EAAE,wCAFkB;AAGhCC,EAAAA,OAAO,EAAE,gCAHuB;AAIhCC,EAAAA,OAAO,EAAE;AAJuB,CAAlC;;AAQA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,GAAD,IAAQV,QAAQ,CAAe,IAAIC,YAAJ,CAAiBG,MAAjB,CAAf,CAAtB,CADa,CAEb;;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAS,CAAT,CAAxC;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAU,KAAV,CAAlC;;AAEA,WAASe,SAAT,GAAoB;AACnB,QAAGF,KAAH,EAAUH,GAAG,CAACM,IAAJ,CAAS,MAAT,EAAiB,mBAAjB;AACV;;AAED,sBACE;AAAA,4BACA,QAAC,aAAD;AACE,MAAA,OAAO,EAAEN,GADX,CAEE;AAFF;AAGE,MAAA,qBAAqB,EAAGO,CAAD,IAAOL,WAAW,CAACK,CAAD,CAH3C;AAIE,MAAA,uBAAuB,EAAGC,CAAD,IAAOJ,QAAQ,CAACI,CAAD,CAJ1C;AAKE,MAAA,YAAY,EAAGC,CAAD,IAAOC,OAAO,CAACC,KAAR,CAAcF,CAAd,CALvB,CAME;AACA;AACA;AARF;AASE,MAAA,KAAK,EAAE;AAAEG,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,MAAM,EAAE;AAAzB,OATT,CAS4C;;AAT5C;AAAA;AAAA;AAAA;AAAA,YADA,eAYC,QAAC,GAAD;AACH,MAAA,OAAO,EAAE;AACPC,QAAAA,CAAC,EAAE,EADI;AAEPC,QAAAA,CAAC,EAAE,GAFI;AAGPH,QAAAA,KAAK,EAAE,GAHA;AAIPC,QAAAA,MAAM,EAAE;AAJD,OADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZD;AAAA,kBADF;AAyBD;;GAnCQd,G;;KAAAA,G;AAuCT,eAAeA,GAAf","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { VFC, useState, useEffect} from 'react';\nimport {\n  UnityContext,\n  UnityRenderer,\n  UnityLoaderConfig,\n} from 'react-unity-renderer';\nimport Draggable from \"react-draggable\";\nimport { Rnd } from 'react-rnd';\n\n// get those URLs from your Unity WebGL build.\n// you *could* put a JSON in your WebGL template containing this information\n// and load that with fetch or axios to assemble your config.\nconst config: UnityLoaderConfig = {\n  loaderUrl: '/unitywebgl/Build/WebDemo.loader.js',\n  frameworkUrl: '/unitywebgl/Build/WebDemo.framework.js',\n  codeUrl: '/unitywebgl/Build/WebDemo.wasm',\n  dataUrl: '/unitywebgl/Build/WebDemo.data',\n};\n\n\nfunction App() {\n  const [ctx] = useState<UnityContext>(new UnityContext(config));\n  // Keep track of the game progress and ready state like this:\n  const [progress, setProgress] = useState<number>(0);\n  const [ready, setReady] = useState<boolean>(false);\n\n  function handleBtn(){\n   if(ready) ctx.emit('Cube', 'StartStopRotation');\n  }\n\n  return (\n    <>\n    <UnityRenderer\n      context={ctx}\n      // optional state information callbacks\n      onUnityProgressChange={(p) => setProgress(p)}\n      onUnityReadyStateChange={(s) => setReady(s)}\n      onUnityError={(e) => console.error(e)}\n      // <UnityRenderer> has every prop (except ref) from HTMLCanvasElement.\n      // This means you can use something like style!\n      // Also it works perfectly with styled-components.\n      style={{ width: '100%', height: '100%' }} // optional, but a good idea.\n    />\n     <Rnd\n  default={{\n    x: 20,\n    y: 200,\n    width: 320,\n    height: 200,\n  }}\n>\n  Rnd\n</Rnd>\n    </>\n  );\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}