{"ast":null,"code":"var _jsxFileName = \"/Users/knottrodt/Projects/REACT-Demo/react-demo/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport { UnityContext, UnityRenderer } from 'react-unity-renderer'; // get those URLs from your Unity WebGL build.\n// you *could* put a JSON in your WebGL template containing this information\n// and load that with fetch or axios to assemble your config.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = {\n  loaderUrl: '/unitywebgl/Build/WebDemo.loader.js',\n  frameworkUrl: '/unitywebgl/Build/WebDemo.framework.js',\n  codeUrl: '/unitywebgl/Build/WebDemo.wasm',\n  dataUrl: '/unitywebgl/Build/WebDemo.data'\n};\n\nfunction App() {\n  _s();\n\n  const [ctx] = useState(new UnityContext(config)); // Keep track of the game progress and ready state like this:\n\n  const [progress, setProgress] = useState(0);\n  const [ready, setReady] = useState(false);\n  useEffect(() => {\n    if (ready === true) {\n      ctx.emit('Cube', 'StartStopRotation');\n    }\n  }, [ready]);\n  return /*#__PURE__*/_jsxDEV(UnityRenderer, {\n    context: ctx // optional state information callbacks\n    ,\n    onUnityProgressChange: p => setProgress(p),\n    onUnityReadyStateChange: s => setReady(s),\n    onUnityError: e => console.error(e) // <UnityRenderer> has every prop (except ref) from HTMLCanvasElement.\n    // This means you can use something like style!\n    // Also it works perfectly with styled-components.\n    ,\n    style: {\n      width: '100%',\n      height: '100%'\n    } // optional, but a good idea.\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"yHdAJcGmbiUqAwiLR3N7O01Q5hk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/knottrodt/Projects/REACT-Demo/react-demo/src/App.tsx"],"names":["React","useState","useEffect","UnityContext","UnityRenderer","config","loaderUrl","frameworkUrl","codeUrl","dataUrl","App","ctx","progress","setProgress","ready","setReady","emit","p","s","e","console","error","width","height"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,WAAP;AACA,SAAcC,QAAd,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,SACEC,YADF,EAEEC,aAFF,QAIO,sBAJP,C,CAMA;AACA;AACA;;;AACA,MAAMC,MAAyB,GAAG;AAChCC,EAAAA,SAAS,EAAE,qCADqB;AAEhCC,EAAAA,YAAY,EAAE,wCAFkB;AAGhCC,EAAAA,OAAO,EAAE,gCAHuB;AAIhCC,EAAAA,OAAO,EAAE;AAJuB,CAAlC;;AAQA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,GAAD,IAAQV,QAAQ,CAAe,IAAIE,YAAJ,CAAiBE,MAAjB,CAAf,CAAtB,CADa,CAEb;;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAS,CAAT,CAAxC;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAU,KAAV,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGY,KAAK,KAAK,IAAb,EAAmB;AACjBH,MAAAA,GAAG,CAACK,IAAJ,CAAS,MAAT,EAAiB,mBAAjB;AACD;AACF,GAJQ,EAIN,CAACF,KAAD,CAJM,CAAT;AAOA,sBACE,QAAC,aAAD;AACE,IAAA,OAAO,EAAEH,GADX,CAEE;AAFF;AAGE,IAAA,qBAAqB,EAAGM,CAAD,IAAOJ,WAAW,CAACI,CAAD,CAH3C;AAIE,IAAA,uBAAuB,EAAGC,CAAD,IAAOH,QAAQ,CAACG,CAAD,CAJ1C;AAKE,IAAA,YAAY,EAAGC,CAAD,IAAOC,OAAO,CAACC,KAAR,CAAcF,CAAd,CALvB,CAME;AACA;AACA;AARF;AASE,IAAA,KAAK,EAAE;AAAEG,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,MAAM,EAAE;AAAzB,KATT,CAS4C;;AAT5C;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GA1BQb,G;;KAAAA,G;AA8BT,eAAeA,GAAf","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { VFC, useState, useEffect} from 'react';\nimport {\n  UnityContext,\n  UnityRenderer,\n  UnityLoaderConfig,\n} from 'react-unity-renderer';\n\n// get those URLs from your Unity WebGL build.\n// you *could* put a JSON in your WebGL template containing this information\n// and load that with fetch or axios to assemble your config.\nconst config: UnityLoaderConfig = {\n  loaderUrl: '/unitywebgl/Build/WebDemo.loader.js',\n  frameworkUrl: '/unitywebgl/Build/WebDemo.framework.js',\n  codeUrl: '/unitywebgl/Build/WebDemo.wasm',\n  dataUrl: '/unitywebgl/Build/WebDemo.data',\n};\n\n\nfunction App() {\n  const [ctx] = useState<UnityContext>(new UnityContext(config));\n  // Keep track of the game progress and ready state like this:\n  const [progress, setProgress] = useState<number>(0);\n  const [ready, setReady] = useState<boolean>(false);\n\n  useEffect(() => {\n    if(ready === true) {\n      ctx.emit('Cube', 'StartStopRotation');\n    }\n  }, [ready]);\n\n\n  return (\n    <UnityRenderer\n      context={ctx}\n      // optional state information callbacks\n      onUnityProgressChange={(p) => setProgress(p)}\n      onUnityReadyStateChange={(s) => setReady(s)}\n      onUnityError={(e) => console.error(e)}\n      // <UnityRenderer> has every prop (except ref) from HTMLCanvasElement.\n      // This means you can use something like style!\n      // Also it works perfectly with styled-components.\n      style={{ width: '100%', height: '100%' }} // optional, but a good idea.\n    />\n  );\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}