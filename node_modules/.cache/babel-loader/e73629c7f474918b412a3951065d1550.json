{"ast":null,"code":"var _jsxFileName = \"/Users/knottrodt/Projects/REACT-Demo/react-demo/src/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { UnityContext, UnityRenderer } from 'react-unity-renderer'; // get those URLs from your Unity WebGL build.\n// you *could* put a JSON in your WebGL template containing this information\n// and load that with fetch or axios to assemble your config.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = {\n  loaderUrl: '../unitywebgl/Build/WebDemo.loader.js',\n  frameworkUrl: 'unitywebgl/Build/WebDemo.framework.js',\n  codeUrl: 'unitywebgl/Build/WebDemo.wasm',\n  dataUrl: 'unitywebgl/Build/WebDemo.data',\n  // everything from here on is optional\n  memoryUrl: '',\n  symbolsUrl: '',\n  streamingAssetsUrl: '',\n  companyName: '',\n  productName: '',\n  productVersion: ''\n};\nexport const UnityGameComponent = () => {\n  _s();\n\n  // You need to construct a config or pass it from the props:\n  const [ctx] = useState(new UnityContext(config)); // Keep track of the game progress and ready state like this:\n\n  const [progress, setProgress] = useState(0);\n  const [ready, setReady] = useState(false);\n  return /*#__PURE__*/_jsxDEV(UnityRenderer, {\n    context: ctx // optional state information callbacks\n    ,\n    onUnityProgressChange: p => setProgress(p),\n    onUnityReadyStateChange: s => setReady(s),\n    onUnityError: e => console.error(e) // <UnityRenderer> has every prop (except ref) from HTMLCanvasElement.\n    // This means you can use something like style!\n    // Also it works perfectly with styled-components.\n    ,\n    style: {\n      width: '100%',\n      height: '100%'\n    } // optional, but a good idea.\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UnityGameComponent, \"s0NmB2opb+dtRYqNZM8DYzCIt08=\");\n\n_c = UnityGameComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"UnityGameComponent\");","map":{"version":3,"sources":["/Users/knottrodt/Projects/REACT-Demo/react-demo/src/index.tsx"],"names":["React","useState","UnityContext","UnityRenderer","config","loaderUrl","frameworkUrl","codeUrl","dataUrl","memoryUrl","symbolsUrl","streamingAssetsUrl","companyName","productName","productVersion","UnityGameComponent","ctx","progress","setProgress","ready","setReady","p","s","e","console","error","width","height"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAAcC,QAAd,QAA8B,OAA9B;AACA,SACEC,YADF,EAEEC,aAFF,QAIO,sBAJP,C,CAMA;AACA;AACA;;;AACA,MAAMC,MAAyB,GAAG;AAChCC,EAAAA,SAAS,EAAE,uCADqB;AAEhCC,EAAAA,YAAY,EAAE,uCAFkB;AAGhCC,EAAAA,OAAO,EAAE,+BAHuB;AAIhCC,EAAAA,OAAO,EAAE,+BAJuB;AAKhC;AACAC,EAAAA,SAAS,EAAE,EANqB;AAOhCC,EAAAA,UAAU,EAAE,EAPoB;AAQhCC,EAAAA,kBAAkB,EAAE,EARY;AAShCC,EAAAA,WAAW,EAAE,EATmB;AAUhCC,EAAAA,WAAW,EAAE,EAVmB;AAWhCC,EAAAA,cAAc,EAAE;AAXgB,CAAlC;AAcA,OAAO,MAAMC,kBAAuB,GAAG,MAAmB;AAAA;;AACxD;AACA,QAAM,CAACC,GAAD,IAAQf,QAAQ,CAAe,IAAIC,YAAJ,CAAiBE,MAAjB,CAAf,CAAtB,CAFwD,CAIxD;;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAS,CAAT,CAAxC;AACA,QAAM,CAACkB,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAU,KAAV,CAAlC;AAEA,sBACE,QAAC,aAAD;AACE,IAAA,OAAO,EAAEe,GADX,CAEE;AAFF;AAGE,IAAA,qBAAqB,EAAGK,CAAD,IAAOH,WAAW,CAACG,CAAD,CAH3C;AAIE,IAAA,uBAAuB,EAAGC,CAAD,IAAOF,QAAQ,CAACE,CAAD,CAJ1C;AAKE,IAAA,YAAY,EAAGC,CAAD,IAAOC,OAAO,CAACC,KAAR,CAAcF,CAAd,CALvB,CAME;AACA;AACA;AARF;AASE,IAAA,KAAK,EAAE;AAAEG,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,MAAM,EAAE;AAAzB,KATT,CAS4C;;AAT5C;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAvBM;;GAAMZ,kB;;KAAAA,kB","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { VFC, useState } from 'react';\nimport {\n  UnityContext,\n  UnityRenderer,\n  UnityLoaderConfig,\n} from 'react-unity-renderer';\n\n// get those URLs from your Unity WebGL build.\n// you *could* put a JSON in your WebGL template containing this information\n// and load that with fetch or axios to assemble your config.\nconst config: UnityLoaderConfig = {\n  loaderUrl: '../unitywebgl/Build/WebDemo.loader.js',\n  frameworkUrl: 'unitywebgl/Build/WebDemo.framework.js',\n  codeUrl: 'unitywebgl/Build/WebDemo.wasm',\n  dataUrl: 'unitywebgl/Build/WebDemo.data',\n  // everything from here on is optional\n  memoryUrl: '',\n  symbolsUrl: '',\n  streamingAssetsUrl: '',\n  companyName: '',\n  productName: '',\n  productVersion: '',\n};\n\nexport const UnityGameComponent: VFC = (): JSX.Element => {\n  // You need to construct a config or pass it from the props:\n  const [ctx] = useState<UnityContext>(new UnityContext(config));\n\n  // Keep track of the game progress and ready state like this:\n  const [progress, setProgress] = useState<number>(0);\n  const [ready, setReady] = useState<boolean>(false);\n\n  return (\n    <UnityRenderer\n      context={ctx}\n      // optional state information callbacks\n      onUnityProgressChange={(p) => setProgress(p)}\n      onUnityReadyStateChange={(s) => setReady(s)}\n      onUnityError={(e) => console.error(e)}\n      // <UnityRenderer> has every prop (except ref) from HTMLCanvasElement.\n      // This means you can use something like style!\n      // Also it works perfectly with styled-components.\n      style={{ width: '100%', height: '100%' }} // optional, but a good idea.\n    />\n  );\n\n\n};\n"]},"metadata":{},"sourceType":"module"}