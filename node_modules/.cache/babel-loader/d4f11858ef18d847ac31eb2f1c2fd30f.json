{"ast":null,"code":"var _jsxFileName = \"/Users/knottrodt/Projects/REACT-Demo/react-demo/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './App.css';\nimport { useState } from 'react';\nimport { UnityContext, UnityRenderer } from 'react-unity-renderer';\nimport { Rnd } from 'react-rnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// get those URLs from your Unity WebGL build.\n// you *could* put a JSON in your WebGL template containing this information\n// and load that with fetch or axios to assemble your config.\nconst config = {\n  loaderUrl: '/unitywebgl/Build/WebDemo.loader.js',\n  frameworkUrl: '/unitywebgl/Build/WebDemo.framework.js',\n  codeUrl: '/unitywebgl/Build/WebDemo.wasm',\n  dataUrl: '/unitywebgl/Build/WebDemo.data'\n};\n\nfunction App() {\n  _s();\n\n  var divStyle = {\n    color: 'black',\n    backgroundColor: 'white'\n  };\n  const [ctx] = useState(new UnityContext(config)); // Keep track of the game progress and ready state like this:\n\n  const [progress, setProgress] = useState(0);\n  const [ready, setReady] = useState(false);\n\n  function handleBtn() {\n    if (ready) ctx.emit('Cube', 'StartStopRotation');\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(UnityRenderer, {\n      context: ctx // optional state information callbacks\n      ,\n      onUnityProgressChange: p => setProgress(p),\n      onUnityReadyStateChange: s => setReady(s),\n      onUnityError: e => console.error(e) // <UnityRenderer> has every prop (except ref) from HTMLCanvasElement.\n      // This means you can use something like style!\n      // Also it works perfectly with styled-components.\n      ,\n      style: {\n        width: '100%',\n        height: '100%'\n      } // optional, but a good idea.\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Rnd, {\n      default: {\n        x: 0,\n        y: 0,\n        width: 320,\n        height: 200\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: divStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"A pretty Overlay Panel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Press the button to interact with the WebGL Unity Project. The Button lets the cube start / stop rotating.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleBtn(),\n          children: \"RotationHandler\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"s0NmB2opb+dtRYqNZM8DYzCIt08=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/knottrodt/Projects/REACT-Demo/react-demo/src/App.tsx"],"names":["React","useState","UnityContext","UnityRenderer","Rnd","config","loaderUrl","frameworkUrl","codeUrl","dataUrl","App","divStyle","color","backgroundColor","ctx","progress","setProgress","ready","setReady","handleBtn","emit","p","s","e","console","error","width","height","x","y"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,WAAP;AACA,SAAcC,QAAd,QAAwC,OAAxC;AACA,SACEC,YADF,EAEEC,aAFF,QAIO,sBAJP;AAMA,SAASC,GAAT,QAAoB,WAApB;;;AAGA;AACA;AACA;AACA,MAAMC,MAAyB,GAAG;AAChCC,EAAAA,SAAS,EAAE,qCADqB;AAEhCC,EAAAA,YAAY,EAAE,wCAFkB;AAGhCC,EAAAA,OAAO,EAAE,gCAHuB;AAIhCC,EAAAA,OAAO,EAAE;AAJuB,CAAlC;;AAQA,SAASC,GAAT,GAAe;AAAA;;AACb,MAAIC,QAAQ,GAAG;AACbC,IAAAA,KAAK,EAAE,OADM;AAEbC,IAAAA,eAAe,EAAE;AAFJ,GAAf;AAKA,QAAM,CAACC,GAAD,IAAQb,QAAQ,CAAe,IAAIC,YAAJ,CAAiBG,MAAjB,CAAf,CAAtB,CANa,CAOb;;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAS,CAAT,CAAxC;AACA,QAAM,CAACgB,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAU,KAAV,CAAlC;;AAGA,WAASkB,SAAT,GAAoB;AACnB,QAAGF,KAAH,EAAUH,GAAG,CAACM,IAAJ,CAAS,MAAT,EAAiB,mBAAjB;AACV;;AAED,sBACE;AAAA,4BACA,QAAC,aAAD;AACE,MAAA,OAAO,EAAEN,GADX,CAEE;AAFF;AAGE,MAAA,qBAAqB,EAAGO,CAAD,IAAOL,WAAW,CAACK,CAAD,CAH3C;AAIE,MAAA,uBAAuB,EAAGC,CAAD,IAAOJ,QAAQ,CAACI,CAAD,CAJ1C;AAKE,MAAA,YAAY,EAAGC,CAAD,IAAOC,OAAO,CAACC,KAAR,CAAcF,CAAd,CALvB,CAME;AACA;AACA;AARF;AASE,MAAA,KAAK,EAAE;AAAEG,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,MAAM,EAAE;AAAzB,OATT,CAS4C;;AAT5C;AAAA;AAAA;AAAA;AAAA,YADA,eAYA,QAAC,GAAD;AACF,MAAA,OAAO,EAAE;AACPC,QAAAA,CAAC,EAAE,CADI;AAEPC,QAAAA,CAAC,EAAE,CAFI;AAGPH,QAAAA,KAAK,EAAE,GAHA;AAIPC,QAAAA,MAAM,EAAE;AAJD,OADP;AAAA,6BAQF;AAAK,QAAA,KAAK,EAAEhB,QAAZ;AAAA,gCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFA,eAGA;AAAQ,UAAA,OAAO,EAAE,MAAIQ,SAAS,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AARE;AAAA;AAAA;AAAA;AAAA,YAZA;AAAA,kBADF;AA8BD;;GA9CQT,G;;KAAAA,G;AAkDT,eAAeA,GAAf","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { VFC, useState, useEffect} from 'react';\nimport {\n  UnityContext,\n  UnityRenderer,\n  UnityLoaderConfig,\n} from 'react-unity-renderer';\nimport Draggable from \"react-draggable\";\nimport { Rnd } from 'react-rnd';\nimport { isWhiteSpaceLike } from 'typescript';\n\n// get those URLs from your Unity WebGL build.\n// you *could* put a JSON in your WebGL template containing this information\n// and load that with fetch or axios to assemble your config.\nconst config: UnityLoaderConfig = {\n  loaderUrl: '/unitywebgl/Build/WebDemo.loader.js',\n  frameworkUrl: '/unitywebgl/Build/WebDemo.framework.js',\n  codeUrl: '/unitywebgl/Build/WebDemo.wasm',\n  dataUrl: '/unitywebgl/Build/WebDemo.data',\n};\n\n\nfunction App() {\n  var divStyle = {\n    color: 'black',\n    backgroundColor: 'white',\n  };\n\n  const [ctx] = useState<UnityContext>(new UnityContext(config));\n  // Keep track of the game progress and ready state like this:\n  const [progress, setProgress] = useState<number>(0);\n  const [ready, setReady] = useState<boolean>(false);\n\n\n  function handleBtn(){\n   if(ready) ctx.emit('Cube', 'StartStopRotation');\n  }\n\n  return (\n    <>\n    <UnityRenderer\n      context={ctx}\n      // optional state information callbacks\n      onUnityProgressChange={(p) => setProgress(p)}\n      onUnityReadyStateChange={(s) => setReady(s)}\n      onUnityError={(e) => console.error(e)}\n      // <UnityRenderer> has every prop (except ref) from HTMLCanvasElement.\n      // This means you can use something like style!\n      // Also it works perfectly with styled-components.\n      style={{ width: '100%', height: '100%' }} // optional, but a good idea.\n    />\n    <Rnd\n  default={{\n    x: 0,\n    y: 0,\n    width: 320,\n    height: 200,\n  }}\n>\n  <div style={divStyle}>\n  <h1>A pretty Overlay Panel</h1>\n  <h3>Press the button to interact with the WebGL Unity Project. The Button lets the cube start / stop rotating.</h3>\n  <button onClick={()=>handleBtn()}>RotationHandler</button>\n  </div>\n  \n</Rnd>\n    </>\n  );\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}