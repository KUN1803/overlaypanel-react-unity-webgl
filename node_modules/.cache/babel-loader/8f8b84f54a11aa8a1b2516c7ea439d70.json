{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnityContext = void 0;\n/**\n * Defines a Unity WebGL context.\n *\n * The context is responsible for the initial startup parameters of the\n * `UnityRenderer`, as well as receiving events and emitting RPCs to Unity.\n *\n */\n\nvar UnityContext =\n/** @class */\nfunction () {\n  /**\n   * Creates a new `UnityContext` and registers the global event callback.\n   *\n   * @param {UnityLoaderConfig} config A loader configuration object.\n   */\n  function UnityContext(config) {\n    this.handlers = {};\n    this.config = config;\n    this.mountGlobalEventRegistry();\n    this.mountGlobalLookupHandler();\n  }\n  /**\n   * Retrieves the currently activte loader configuration.\n   *\n   * @returns {UnityLoaderConfig} The current loader configuration object.\n   */\n\n\n  UnityContext.prototype.getConfig = function () {\n    return this.config;\n  };\n  /**\n   * Sets the Unity instance this `UnityContext` is responsible for.\n   *\n   * @param {UnityInstance} instance The running Unity instance\n   */\n\n\n  UnityContext.prototype.setInstance = function (instance) {\n    this.instance = instance;\n  };\n  /**\n   * Shuts down the running Unity instance, then unregisters the existing\n   * event handlers.\n   *\n   * @param {() => void} onShutdownFinished Callback to execute when the\n   * shutdown has been completed.\n   *\n   * @returns {void} void\n   */\n\n\n  UnityContext.prototype.shutdown = function (onShutdownFinished) {\n    var _this = this;\n\n    if (!this.instance) {\n      if (onShutdownFinished) onShutdownFinished();\n      return;\n    }\n\n    this.instance.Quit().then(function () {\n      _this.instance = undefined; // remove all instance event handlers\n\n      Object.keys(_this.handlers).forEach(function (name) {\n        return _this.off(name);\n      });\n      if (onShutdownFinished) onShutdownFinished();\n    }).catch(function (e) {\n      // eslint-disable-next-line no-console\n      return console.error('error while shutting down webgl instance', e);\n    });\n  };\n  /**\n   * Sends a message to the running Unity instance.\n   *\n   * @param {string} objectName The `GameObject` on which to call the method.\n   * @param {string} methodName The name of the method which should be invoked.\n   * @param {(string | number)} value The value to pass to the method\n   * as the first parameter.\n   * @returns {void} void\n   */\n\n\n  UnityContext.prototype.emit = function (objectName, methodName, value) {\n    if (!this.instance) {\n      // eslint-disable-next-line no-console\n      console.error('cannot send unity message: missing instance');\n      return;\n    }\n\n    try {\n      this.instance.SendMessage(objectName, methodName, value);\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error('failed to send message to unity instance:', e);\n    }\n  };\n  /**\n   * Delegates an event handler to handle an event (from Unity) by using a\n   * callback function.\n   *\n   * @param {string} name The (unique) name of the event.\n   * @param {UnityEventCallback} callback The callback which should be invoked\n   * upon the occurence of this event.\n   */\n\n\n  UnityContext.prototype.on = function (name, callback) {\n    // unregister any old event handler\n    if (this.handlers[name]) this.off(name); // set new event handler\n\n    this.handlers[name] = callback; // create global registry key if needed\n\n    if (window.__UnityBridgeRegistry__ && (!window.__UnityBridgeRegistry__[name] || // key does not exist\n    window.__UnityBridgeRegistry__[name] && // key is not an array\n    !Array.isArray(window.__UnityBridgeRegistry__[name]))) window.__UnityBridgeRegistry__[name] = []; // add callback to event registry\n\n    window.__UnityBridgeRegistry__[name].push(callback);\n  };\n  /**\n   * Removes a instance-local event handler from the global event registry.\n   *\n   * @param {string} name Name of the local event handler.\n   */\n\n\n  UnityContext.prototype.off = function (name) {\n    var _this = this;\n\n    if (window.__UnityBridgeRegistry__ && window.__UnityBridgeRegistry__[name] && Array.isArray(window.__UnityBridgeRegistry__[name])) window.__UnityBridgeRegistry__[name] = window.__UnityBridgeRegistry__[name].filter(function (cb) {\n      return cb !== _this.handlers[name];\n    });\n  };\n  /**\n   * Enables or disables fullscreen mode.\n   *\n   * @param {booolean} enabled Whether to enable or disable fullscreen.\n   * @returns {void} void\n   */\n\n\n  UnityContext.prototype.setFullscreen = function (enabled) {\n    if (!this.instance) return;\n    this.instance.SetFullscreen(enabled ? 1 : 0);\n  };\n  /**\n   * Creates a global event registry which holds a list of callbacks for\n   * each registered event name.\n   * This enables fairly fail-safe multi-tenancy event handling.\n   *\n   * @returns {void} void\n   */\n\n\n  UnityContext.prototype.mountGlobalEventRegistry = function () {\n    // create global handler registry if there is none\n    if (!window.__UnityBridgeRegistry__ || typeof window.__UnityBridgeRegistry__ !== 'object') window.__UnityBridgeRegistry__ = {};\n  };\n  /**\n   * Creates the global lookup handler which looks up the list of event\n   * handlers for a given event name and executes them with the arguments\n   * of the callback.\n   *\n   * If no event handler is registered for an event that is received, a\n   * warning will be logged to the console.\n   *\n   * @returns {void} void\n   */\n\n\n  UnityContext.prototype.mountGlobalLookupHandler = function () {\n    // either returns a callback which executes any registered event handler\n    // or a fallback handler\n    var lookupHandler = function (name) {\n      if (window.__UnityBridgeRegistry__ && window.__UnityBridgeRegistry__[name] && Array.isArray(window.__UnityBridgeRegistry__[name]) && window.__UnityBridgeRegistry__[name].length > 0) // return a function taking any params and executing them on all\n        // registred event handlers\n        return function () {\n          var params = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            params[_i] = arguments[_i];\n          }\n\n          window.__UnityBridgeRegistry__[name].forEach(function (handler) {\n            try {\n              handler.apply(void 0, params);\n            } catch (e) {\n              // eslint-disable-next-line no-console\n              console.warn(\"failed to execute event handler for event \\\"\" + name + \"\\\":\", e);\n            }\n          });\n        };\n      return function () {\n        // eslint-disable-next-line no-console\n        return console.warn(\"received event \\\"\" + name + \"\\\": no handlers registered\");\n      };\n    }; // create global lookup handler which uses the registry, but only\n    // if it is not registered yet\n\n\n    if (!window.UnityBridge || typeof window.UnityBridge !== 'function') window.UnityBridge = lookupHandler;\n  };\n\n  return UnityContext;\n}();\n\nexports.UnityContext = UnityContext;","map":{"version":3,"sources":["../../src/lib/context.ts"],"names":[],"mappings":";;;;;;AA4BA;;;;;;AAMG;;AACH,IAAA,YAAA;AAAA;AAAA,YAAA;AAOE;;;;AAIG;AACH,WAAA,YAAA,CAAY,MAAZ,EAAqC;AAP7B,SAAA,QAAA,GAAyD,EAAzD;AAQN,SAAK,MAAL,GAAc,MAAd;AAEA,SAAK,wBAAL;AACA,SAAK,wBAAL;AACD;AAED;;;;AAIG;;;AACI,EAAA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAP,YAAA;AACE,WAAO,KAAK,MAAZ;AACD,GAFM;AAIP;;;;AAIG;;;AACI,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,QAAnB,EAA0C;AACxC,SAAK,QAAL,GAAgB,QAAhB;AACD,GAFM;AAIP;;;;;;;;AAQG;;;AACI,EAAA,YAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,kBAAhB,EAA+C;AAA/C,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,CAAC,KAAK,QAAV,EAAoB;AAClB,UAAI,kBAAJ,EAAwB,kBAAkB;AAC1C;AACD;;AAED,SAAK,QAAL,CACG,IADH,GAEG,IAFH,CAEQ,YAAA;AACJ,MAAA,KAAI,CAAC,QAAL,GAAgB,SAAhB,CADI,CAEJ;;AACA,MAAA,MAAM,CAAC,IAAP,CAAY,KAAI,CAAC,QAAjB,EAA2B,OAA3B,CAAmC,UAAC,IAAD,EAAK;AAAK,eAAA,KAAI,CAAC,GAAL,CAAA,IAAA,CAAA;AAAc,OAA3D;AAEA,UAAI,kBAAJ,EAAwB,kBAAkB;AAC3C,KARH,EASG,KATH,CASS,UAAC,CAAD,EAAE;AACP;AACA,aAAA,OAAO,CAAC,KAAR,CAAc,0CAAd,EAA0D,CAA1D,CAAA;AAA4D,KAXhE;AAaD,GAnBM;AAqBP;;;;;;;;AAQG;;;AACI,EAAA,YAAA,CAAA,SAAA,CAAA,IAAA,GAAP,UACE,UADF,EAEE,UAFF,EAGE,KAHF,EAGyB;AAEvB,QAAI,CAAC,KAAK,QAAV,EAAoB;AAClB;AACA,MAAA,OAAO,CAAC,KAAR,CAAc,6CAAd;AACA;AACD;;AAED,QAAI;AACF,WAAK,QAAL,CAAc,WAAd,CAA0B,UAA1B,EAAsC,UAAtC,EAAkD,KAAlD;AACD,KAFD,CAEE,OAAO,CAAP,EAAU;AACV;AACA,MAAA,OAAO,CAAC,KAAR,CAAc,2CAAd,EAA2D,CAA3D;AACD;AACF,GAjBM;AAmBP;;;;;;;AAOG;;;AACI,EAAA,YAAA,CAAA,SAAA,CAAA,EAAA,GAAP,UACE,IADF,EAEE,QAFF,EAIW;AAET;AACA,QAAI,KAAK,QAAL,CAAc,IAAd,CAAJ,EAAyB,KAAK,GAAL,CAAS,IAAT,EAHhB,CAKT;;AACA,SAAK,QAAL,CAAc,IAAd,IAAsB,QAAtB,CANS,CAQT;;AACA,QACE,MAAM,CAAC,uBAAP,KACC,CAAC,MAAM,CAAC,uBAAP,CAA+B,IAA/B,CAAD,IAAyC;AACvC,IAAA,MAAM,CAAC,uBAAP,CAA+B,IAA/B,KAAwC;AACvC,KAAC,KAAK,CAAC,OAAN,CAAc,MAAM,CAAC,uBAAP,CAA+B,IAA/B,CAAd,CAHL,CADF,EAME,MAAM,CAAC,uBAAP,CAA+B,IAA/B,IAAuC,EAAvC,CAfO,CAiBT;;AACA,IAAA,MAAM,CAAC,uBAAP,CAA+B,IAA/B,EAAqC,IAArC,CAA0C,QAA1C;AACD,GAvBM;AAyBP;;;;AAIG;;;AACI,EAAA,YAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAW,IAAX,EAAyD;AAAzD,QAAA,KAAA,GAAA,IAAA;;AACE,QACE,MAAM,CAAC,uBAAP,IACA,MAAM,CAAC,uBAAP,CAA+B,IAA/B,CADA,IAEA,KAAK,CAAC,OAAN,CAAc,MAAM,CAAC,uBAAP,CAA+B,IAA/B,CAAd,CAHF,EAKE,MAAM,CAAC,uBAAP,CAA+B,IAA/B,IAAuC,MAAM,CAAC,uBAAP,CACrC,IADqC,EAErC,MAFqC,CAE9B,UAAC,EAAD,EAAG;AAAK,aAAA,EAAE,KAAK,KAAI,CAAC,QAAL,CAAP,IAAO,CAAP;AAA0B,KAFJ,CAAvC;AAGH,GATM;AAWP;;;;;AAKG;;;AACI,EAAA,YAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,OAArB,EAAqC;AACnC,QAAI,CAAC,KAAK,QAAV,EAAoB;AACpB,SAAK,QAAL,CAAc,aAAd,CAA4B,OAAO,GAAG,CAAH,GAAO,CAA1C;AACD,GAHM;AAKP;;;;;;AAMG;;;AACK,EAAA,YAAA,CAAA,SAAA,CAAA,wBAAA,GAAR,YAAA;AACE;AACA,QACE,CAAC,MAAM,CAAC,uBAAR,IACA,OAAO,MAAM,CAAC,uBAAd,KAA0C,QAF5C,EAIE,MAAM,CAAC,uBAAP,GAAiC,EAAjC;AACH,GAPO;AASR;;;;;;;;;AASG;;;AACK,EAAA,YAAA,CAAA,SAAA,CAAA,wBAAA,GAAR,YAAA;AACE;AACA;AACA,QAAM,aAAa,GAAG,UAAC,IAAD,EAAa;AACjC,UACE,MAAM,CAAC,uBAAP,IACA,MAAM,CAAC,uBAAP,CAA+B,IAA/B,CADA,IAEA,KAAK,CAAC,OAAN,CAAc,MAAM,CAAC,uBAAP,CAA+B,IAA/B,CAAd,CAFA,IAGA,MAAM,CAAC,uBAAP,CAA+B,IAA/B,EAAqC,MAArC,GAA8C,CAJhD,EAME;AACA;AACA,eAAO,YAAA;AAAC,cAAA,MAAA,GAAA,EAAA;;eAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,YAAA,MAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACN,UAAA,MAAM,CAAC,uBAAP,CAA+B,IAA/B,EAAqC,OAArC,CAA6C,UAAC,OAAD,EAAQ;AACnD,gBAAI;AACF,cAAA,OAAO,CAAA,KAAP,CAAO,KAAA,CAAP,EAAW,MAAX;AACD,aAFD,CAEE,OAAO,CAAP,EAAU;AACV;AACA,cAAA,OAAO,CAAC,IAAR,CACE,iDAA8C,IAA9C,GAAkD,KADpD,EAEE,CAFF;AAID;AACF,WAVD;AAWD,SAZD;AAcF,aAAO,YAAA;AACL;AACA,eAAA,OAAO,CAAC,IAAR,CAAa,sBAAmB,IAAnB,GAAuB,4BAApC,CAAA;AAAgE,OAFlE;AAGD,KA1BD,CAHF,CA+BE;AACA;;;AACA,QAAI,CAAC,MAAM,CAAC,WAAR,IAAuB,OAAO,MAAM,CAAC,WAAd,KAA8B,UAAzD,EACE,MAAM,CAAC,WAAP,GAAqB,aAArB;AACH,GAnCO;;AAoCV,SAAA,YAAA;AAAC,CAzND,EAAA;;AAAa,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UnityContext = void 0;\n/**\n * Defines a Unity WebGL context.\n *\n * The context is responsible for the initial startup parameters of the\n * `UnityRenderer`, as well as receiving events and emitting RPCs to Unity.\n *\n */\nvar UnityContext = /** @class */ (function () {\n    /**\n     * Creates a new `UnityContext` and registers the global event callback.\n     *\n     * @param {UnityLoaderConfig} config A loader configuration object.\n     */\n    function UnityContext(config) {\n        this.handlers = {};\n        this.config = config;\n        this.mountGlobalEventRegistry();\n        this.mountGlobalLookupHandler();\n    }\n    /**\n     * Retrieves the currently activte loader configuration.\n     *\n     * @returns {UnityLoaderConfig} The current loader configuration object.\n     */\n    UnityContext.prototype.getConfig = function () {\n        return this.config;\n    };\n    /**\n     * Sets the Unity instance this `UnityContext` is responsible for.\n     *\n     * @param {UnityInstance} instance The running Unity instance\n     */\n    UnityContext.prototype.setInstance = function (instance) {\n        this.instance = instance;\n    };\n    /**\n     * Shuts down the running Unity instance, then unregisters the existing\n     * event handlers.\n     *\n     * @param {() => void} onShutdownFinished Callback to execute when the\n     * shutdown has been completed.\n     *\n     * @returns {void} void\n     */\n    UnityContext.prototype.shutdown = function (onShutdownFinished) {\n        var _this = this;\n        if (!this.instance) {\n            if (onShutdownFinished)\n                onShutdownFinished();\n            return;\n        }\n        this.instance\n            .Quit()\n            .then(function () {\n            _this.instance = undefined;\n            // remove all instance event handlers\n            Object.keys(_this.handlers).forEach(function (name) { return _this.off(name); });\n            if (onShutdownFinished)\n                onShutdownFinished();\n        })\n            .catch(function (e) {\n            // eslint-disable-next-line no-console\n            return console.error('error while shutting down webgl instance', e);\n        });\n    };\n    /**\n     * Sends a message to the running Unity instance.\n     *\n     * @param {string} objectName The `GameObject` on which to call the method.\n     * @param {string} methodName The name of the method which should be invoked.\n     * @param {(string | number)} value The value to pass to the method\n     * as the first parameter.\n     * @returns {void} void\n     */\n    UnityContext.prototype.emit = function (objectName, methodName, value) {\n        if (!this.instance) {\n            // eslint-disable-next-line no-console\n            console.error('cannot send unity message: missing instance');\n            return;\n        }\n        try {\n            this.instance.SendMessage(objectName, methodName, value);\n        }\n        catch (e) {\n            // eslint-disable-next-line no-console\n            console.error('failed to send message to unity instance:', e);\n        }\n    };\n    /**\n     * Delegates an event handler to handle an event (from Unity) by using a\n     * callback function.\n     *\n     * @param {string} name The (unique) name of the event.\n     * @param {UnityEventCallback} callback The callback which should be invoked\n     * upon the occurence of this event.\n     */\n    UnityContext.prototype.on = function (name, callback) {\n        // unregister any old event handler\n        if (this.handlers[name])\n            this.off(name);\n        // set new event handler\n        this.handlers[name] = callback;\n        // create global registry key if needed\n        if (window.__UnityBridgeRegistry__ &&\n            (!window.__UnityBridgeRegistry__[name] || // key does not exist\n                (window.__UnityBridgeRegistry__[name] && // key is not an array\n                    !Array.isArray(window.__UnityBridgeRegistry__[name]))))\n            window.__UnityBridgeRegistry__[name] = [];\n        // add callback to event registry\n        window.__UnityBridgeRegistry__[name].push(callback);\n    };\n    /**\n     * Removes a instance-local event handler from the global event registry.\n     *\n     * @param {string} name Name of the local event handler.\n     */\n    UnityContext.prototype.off = function (name) {\n        var _this = this;\n        if (window.__UnityBridgeRegistry__ &&\n            window.__UnityBridgeRegistry__[name] &&\n            Array.isArray(window.__UnityBridgeRegistry__[name]))\n            window.__UnityBridgeRegistry__[name] = window.__UnityBridgeRegistry__[name].filter(function (cb) { return cb !== _this.handlers[name]; });\n    };\n    /**\n     * Enables or disables fullscreen mode.\n     *\n     * @param {booolean} enabled Whether to enable or disable fullscreen.\n     * @returns {void} void\n     */\n    UnityContext.prototype.setFullscreen = function (enabled) {\n        if (!this.instance)\n            return;\n        this.instance.SetFullscreen(enabled ? 1 : 0);\n    };\n    /**\n     * Creates a global event registry which holds a list of callbacks for\n     * each registered event name.\n     * This enables fairly fail-safe multi-tenancy event handling.\n     *\n     * @returns {void} void\n     */\n    UnityContext.prototype.mountGlobalEventRegistry = function () {\n        // create global handler registry if there is none\n        if (!window.__UnityBridgeRegistry__ ||\n            typeof window.__UnityBridgeRegistry__ !== 'object')\n            window.__UnityBridgeRegistry__ = {};\n    };\n    /**\n     * Creates the global lookup handler which looks up the list of event\n     * handlers for a given event name and executes them with the arguments\n     * of the callback.\n     *\n     * If no event handler is registered for an event that is received, a\n     * warning will be logged to the console.\n     *\n     * @returns {void} void\n     */\n    UnityContext.prototype.mountGlobalLookupHandler = function () {\n        // either returns a callback which executes any registered event handler\n        // or a fallback handler\n        var lookupHandler = function (name) {\n            if (window.__UnityBridgeRegistry__ &&\n                window.__UnityBridgeRegistry__[name] &&\n                Array.isArray(window.__UnityBridgeRegistry__[name]) &&\n                window.__UnityBridgeRegistry__[name].length > 0)\n                // return a function taking any params and executing them on all\n                // registred event handlers\n                return function () {\n                    var params = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        params[_i] = arguments[_i];\n                    }\n                    window.__UnityBridgeRegistry__[name].forEach(function (handler) {\n                        try {\n                            handler.apply(void 0, params);\n                        }\n                        catch (e) {\n                            // eslint-disable-next-line no-console\n                            console.warn(\"failed to execute event handler for event \\\"\" + name + \"\\\":\", e);\n                        }\n                    });\n                };\n            return function () {\n                // eslint-disable-next-line no-console\n                return console.warn(\"received event \\\"\" + name + \"\\\": no handlers registered\");\n            };\n        };\n        // create global lookup handler which uses the registry, but only\n        // if it is not registered yet\n        if (!window.UnityBridge || typeof window.UnityBridge !== 'function')\n            window.UnityBridge = lookupHandler;\n    };\n    return UnityContext;\n}());\nexports.UnityContext = UnityContext;\n//# sourceMappingURL=context.js.map"]},"metadata":{},"sourceType":"script"}